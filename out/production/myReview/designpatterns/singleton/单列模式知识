1、单例模式定义：
    保证一个类只有一个实例，并且提供一个全局访问点。

2、场景:
    重量级的对象，不需要多个实例，如线程池，数据库连接池。

3、单例模式的经典实现：
3.1、懒汉模式：延时加载，只有在真正使用的时候，才开始实例化。
（1）线程安全问题；多线程下出现重复创建问题。
（2）doble check 加锁优化(防止多线程情况下重复创建)
（3）编译器(JIT)，CPU有可能对指令进行重排序，导致使用到尚未初始化的实例，可以通过添加volatile关键字进行修饰，
    对应volatile修饰的字段，可以防止指令重排。

3.2、饿汉模式：类加载的初始化阶段就完成了实例的初始化。本质上就是借助jvm类加载机制，保证实例的唯一性；
（1）类加载的过程：
    ①加载二进制数据到内存中，生成对应的class数据结构，
    ②连接：验证，准备（给类的静态成员变量赋默认值），解析
    ③初始化：给类的静态变量赋初值。
（2）只有在真正使用对应的类是，才会触发初始化

3.3、静态内部类模式：
（1）本质上是利用类的加载机制来保证线程安全；
（2）只有在实际使用的时候，才会触发类的初始化，所以也是懒加载的一种形式；

3.4、发射攻击实例：
（1）由于Java反射机制的存在，反射可以绕过单例模式创建的类实例，再次创建类实例对象，破坏了单例模式。
（2）解决方法，可以在类的私有构造函数里面进行检查判断，不允许创建多个实例。(懒汉模式无法进行防护)

3.5、枚举类型：
（1）天然不支持反射创建对应的实例，且有字节的反序列化机制；
（2）利用类加载机制保证线程安全。

JDK中单例模式的应用：
(1)Runtime类：典型的饿汉模式
(2)Spring中DefaultSingletonBeanRegistry提供了注册单例容器，添加单例到容器，获取单例的方法。
(3)Spring中的ReactiveAdapterRegister类使用了volatile防止指令重排，也使用了懒汉模式实现单例。
(4)Spring中的proxyFactoryBean类，使用代理模式来创建单例类。