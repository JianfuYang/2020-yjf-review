/**
 * Copyright (C), 2018-2020, GDUT_YJF
 * FileName: MyThread
 * Author:   Jianf
 * Date:     2020/7/21 20:08
 * Description:
 * History:
 * <author>          <time>          <version>          <desc>
 * 作者姓名           修改时间           版本号              描述
 */
package PerformanceTuningTool;

/**
 * 〈一句话功能简述〉<br> 
 * 〈〉
 *
 * @author Jianf
 * @create 2020/7/21
 * @since 1.0.0
 */


import com.sun.tools.javac.Main;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * 使用一个占用空间很大的类，模拟实际业务
 */
class BigClass{
    List<Double> list;
    BigClass(){
        list = new ArrayList<>();
        for(int i=0;i<100000;i++){
            list.add(i*1.0);
        }
    }
}

class MyThread implements Runnable{

    @Override
    public void run() {
        Point p = new Point(0,0,"Thread-1");
        Random rt = new Random();
        int cnt=0;
        while(true){
            int dx = rt.nextInt(10);
            int dy = rt.nextInt(10);
            if((dx&1)==1){
                p.add(dx,dy);
            }else{
                p.sub(dx,dy);
            }
            if(cnt%3==0){
                JDKTuningTool.l1.add(new BigClass());
                System.out.println("Generated by 1");
            }
            p.print();
            try{
                Thread.sleep(2000);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
            cnt++;
        }
    }
}


class MyThread2 implements Runnable{

    @Override
    public void run() {
        Point p = new Point(0,0,"Thread-2");
        Random rt = new Random();
        int cnt=0;
        while(true){
            int dx = rt.nextInt(10);
            int dy = rt.nextInt(10);
            if((dx&1)==1){
                p.add(dx,dy);
            }else{
                p.sub(dx,dy);
            }
            if(cnt%3==0){
                JDKTuningTool.l2.add(new BigClass());
                System.out.println("Generated by 2");
            }
            p.print();
            try {
                Thread.sleep(3000);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
            cnt++;
        }
    }
}
